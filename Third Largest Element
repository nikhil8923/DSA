Ques-

Given an array, arr of positive integers. Find the third largest element in it. Return -1 if the third largest element is not found.

Examples:

Input: arr[] = [2, 4, 1, 3, 5]
Output: 3
Explanation: The third largest element in the array [2, 4, 1, 3, 5] is 3.
Input: arr[] = [10, 2]
Output: -1
Explanation: There are less than three elements in the array, so the third largest element cannot be determined.
Input: arr[] = [5, 5, 5]
Output: 5
Explanation: In the array [5, 5, 5], the third largest element can be considered 5, as there are no other distinct elements.
Expected Time Complexity: O(n)
Expected Space Complexity: O(1)

Constraints:
1 ≤ arr.size ≤ 105
1 ≤ arr[i] ≤ 105

Answer/Code-

class Solution {
    int thirdLargest(int arr[]) {
        
        int firstLargest = -1;
        int secLargest = -1;
        int thirdLargest = -1;
        
        for(int i : arr){
            if(i > firstLargest){
                thirdLargest = secLargest;
                secLargest = firstLargest;
                firstLargest = i;
            } else if (i > secLargest){
                thirdLargest = secLargest;
                secLargest = i;
            } else if( i> thirdLargest){
                thirdLargest = i;
            }
        }
        return thirdLargest;
    }
}
